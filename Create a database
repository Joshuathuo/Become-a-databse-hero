We are going to create a database and in this case you can call it any name that you may wish
1. CREATE A DATABASE
CREATE DATABASE TEST;
2 CREATE TABLES
When creating tables, you will have to create tables according to the requirements that you will have.
 create table student(
          stud_id int not null auto_increment,
          stud_email varchar(30),
          stud_regno varchar(20) not null,
          stud_phone varchar(20),
          primary key(stud_id)
          ) engine=innodb;
When creating a table in a database, the format above is used and in between the lines, one may add what specifically they want their tables to have.

After doing all this, you may realize that a certain column in the table needs to be dropped. It is done as follows:
        
      DROPPING A COLUMN IN A TABLE
    alter table college  // altering the table of interest
   drop column coll_id;  // removing a column in the table of interest
   
Moreover, you may need to add columns in a table in your database: See the procedure below.

   ADDING A COLUMN IN AN EXSISTING TABLE 
    alter table college // altering the table of interest
    add column col_id int not null auto_increment primary key; // adding a column in the table of interest
    
In an instance where you need to reference a primary key in another table as a foreign key, the following syntax is used:

      ADDING A FOREIGN KEY IN AN EXISTING TABLE
     alter table department // altering the table of interest
    add fkcol_id int; // adding a column in the table of interest\
    
After the creation of all the tables, you may realize that several tables are linked up with others in a way that a relationship between the tables.
The syntax is as follows:

CREATING A RELATIONSHIP
     alter table department   // altering the table of interest
add constraint college_to_department // add a link for the two tables of interest
foreign key(fk_col_id)    //include the foreign key(primary key of another table)
references college(col_id); // refer the foreign key to the primary key of the other table

The above syntax will be used for every table that requires a relationship.

Inserting data to a table is the next step in this process and it is done as follows:

INSERTING VALUES INTON THE TABLES:

ALTER table program;
INSERT into program (prog_id , prog_name , fk_dep_id) 
values("100","Computing and Informatics" , "3100"),
("101","Mechanical Engeneering" , "3101"),
("102","Civil Engeneering" , "3101"),
("103","Electrical Engeneering" , "3101"),
("104","Public Health" , "3102"),
("105","Community Health " , "3102"),
("106","Business Administration" , "3103"),
("107","Computer Science and Mathematics" , "3104"),
("108","Vertirnary Science" , "3104"),
("109","Meal Hygiene" , "3105"),

In the progress of wanting to know, you may need to set a number in which you may want a clear point of auto-increment. 
This is demonstrated as shown below

There is also a need to modify a column if it contains some unwanted code as shown below.

MODIFYING A COLUMN/CHANGING A COLUMN POSITION

alter table student modify column stud_name varchar(50)after stud_id;
alter table student modify column stud_name varchar(50)first;

The above syntax will be able to change the position of a particular column.

SETTING AN AUTO_INCREMENT VALUE FOR A TABLE	*
		*	ALTER TABLE lecturer auto_increment=1010;
  
  The above syntax is a general syntax to use at any circumstance.
  
  WILDCARD CHARACTERS
Wildcard characters are used with the SQL LIKE operator. 
SQL wildcards are used to search for data within a table.	

